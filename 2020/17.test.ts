import {
  countActiveCubes,
  getNeighborCoords,
  mapCellToString,
  plainStringToGrid3d,
  plainStringToGrid4d,
  simulateCycle,
  simulateCycles,
} from "./17";

const gridInput = `
.#.
..#
###
`.trim();
const gridAfterCycle0 = `
z=0
.#.
..#
###
`.trim();
const gridAfterCycle1 = `
z=-1
#..
..#
.#.

z=0
#.#
.##
.#.

z=1
#..
..#
.#.
`.trim();

const gridAfterCycle2 = `
z=-2
.....
.....
..#..
.....
.....

z=-1
..#..
.#..#
....#
.#...
.....

z=0
##...
##...
#....
....#
.###.

z=1
..#..
.#..#
....#
.#...
.....

z=2
.....
.....
..#..
.....
.....
`.trim();

const gridAfterCycle3 = `
z=-2
.......
.......
..##...
..###..
.......
.......
.......

z=-1
..#....
...#...
#......
.....##
.#...#.
..#.#..
...#...

z=0
...#...
.......
#......
.......
.....##
.##.#..
...#...

z=1
..#....
...#...
#......
.....##
.#...#.
..#.#..
...#...

z=2
.......
.......
..##...
..###..
.......
.......
.......
`.trim();

const grid4dAfterCycle0 = `
z=0, w=0
.#.
..#
###
`.trim();

const grid4dAfterCycle1 = `
z=-1, w=-1
#..
..#
.#.

z=0, w=-1
#..
..#
.#.

z=1, w=-1
#..
..#
.#.

z=-1, w=0
#..
..#
.#.

z=0, w=0
#.#
.##
.#.

z=1, w=0
#..
..#
.#.

z=-1, w=1
#..
..#
.#.

z=0, w=1
#..
..#
.#.

z=1, w=1
#..
..#
.#.
`.trim();

const grid4dAfterCycle2 = `
z=-2, w=-2
.....
.....
..#..
.....
.....

z=-1, w=-2
.....
.....
.....
.....
.....

z=0, w=-2
###..
##.##
#...#
.#..#
.###.

z=1, w=-2
.....
.....
.....
.....
.....

z=2, w=-2
.....
.....
..#..
.....
.....

z=-2, w=-1
.....
.....
.....
.....
.....

z=-1, w=-1
.....
.....
.....
.....
.....

z=0, w=-1
.....
.....
.....
.....
.....

z=1, w=-1
.....
.....
.....
.....
.....

z=2, w=-1
.....
.....
.....
.....
.....

z=-2, w=0
###..
##.##
#...#
.#..#
.###.

z=-1, w=0
.....
.....
.....
.....
.....

z=0, w=0
.....
.....
.....
.....
.....

z=1, w=0
.....
.....
.....
.....
.....

z=2, w=0
###..
##.##
#...#
.#..#
.###.

z=-2, w=1
.....
.....
.....
.....
.....

z=-1, w=1
.....
.....
.....
.....
.....

z=0, w=1
.....
.....
.....
.....
.....

z=1, w=1
.....
.....
.....
.....
.....

z=2, w=1
.....
.....
.....
.....
.....

z=-2, w=2
.....
.....
..#..
.....
.....

z=-1, w=2
.....
.....
.....
.....
.....

z=0, w=2
###..
##.##
#...#
.#..#
.###.

z=1, w=2
.....
.....
.....
.....
.....

z=2, w=2
.....
.....
..#..
.....
.....
`.trim();

test("plainStringToGrid3d", () => {
  expect(plainStringToGrid3d(gridInput).toString(mapCellToString)).toEqual(
    gridAfterCycle0
  );
});
test("plainStringToGrid4d", () => {
  expect(plainStringToGrid4d(gridInput).toString(mapCellToString)).toEqual(
    grid4dAfterCycle0
  );
});

test("getNeighborCoords", () => {
  expect(getNeighborCoords([0, 0, 0])).toHaveLength(26);
  expect(getNeighborCoords([0, 0, 0, 0])).toHaveLength(80);
});

test("simulateCycle", () => {
  const grid0 = plainStringToGrid3d(gridInput);
  expect(grid0.toString(mapCellToString)).toEqual(gridAfterCycle0);
  const grid1 = simulateCycle(grid0);
  expect(grid1.toString(mapCellToString)).toEqual(gridAfterCycle1);
  const grid2 = simulateCycle(grid1);
  expect(grid2.toString(mapCellToString)).toEqual(gridAfterCycle2);
  const grid3 = simulateCycle(grid2);
  expect(grid3.toString(mapCellToString)).toEqual(gridAfterCycle3);
});
test("simulateCycle in 4d", () => {
  const grid0 = plainStringToGrid4d(gridInput);
  expect(grid0.toString(mapCellToString)).toEqual(grid4dAfterCycle0);
  const grid1 = simulateCycle(grid0);
  expect(grid1.toString(mapCellToString)).toEqual(grid4dAfterCycle1);
  const grid2 = simulateCycle(grid1);
  expect(grid2.toString(mapCellToString)).toEqual(grid4dAfterCycle2);
});

test("simulateCycles and countActiveCubes", () => {
  const grid0 = plainStringToGrid3d(gridInput);
  const grid6 = simulateCycles(grid0, 6);
  expect(countActiveCubes(grid6)).toEqual(112);
});
test("simulateCycles and countActiveCubes in 4d", () => {
  const grid0 = plainStringToGrid4d(gridInput);
  const grid6 = simulateCycles(grid0, 6);
  expect(countActiveCubes(grid6)).toEqual(848);
});
